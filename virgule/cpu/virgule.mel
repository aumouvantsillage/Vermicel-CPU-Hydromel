#lang hydromel

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import "common.mel"
import "bus.mel"
import "decoder.mel"
import "register_unit.mel"
import "arith_logic_unit.mel"
import "branch_unit.mel"
import "load_store_unit.mel"

type state_t = enumeration(~fetch, ~decode, ~execute, ~load, ~store, ~writeback)

component virgule
    port reset : in bit
    port io    : splice bus

    #
    # Sequencer:
    # state machine with one-hot encoding.
    #

    signal state : state_t = register(
        ~fetch when reset,
        case state of
            ~fetch     => if ready then ~decode else state
            ~decode    => ~execute
            ~execute   => if     dec.instr.is_load  then ~load
                          elseif dec.instr.is_store then ~store
                          elseif dec.instr.has_rd   then ~writeback
                          else                           ~fetch
            ~load      => if ready then ~writeback else state
            ~store     => if ready then ~fetch     else state
            ~writeback => ~fetch
            _          => ~fetch
    )

    signal fetch_en     = state == ~fetch
    signal decode_en    = state == ~decode
    signal execute_en   = state == ~execute
    signal load_en      = state == ~load
    signal store_en     = state == ~store
    signal writeback_en = state == ~writeback

    #
    # Instruction decoding:
    # decode, read registers, select ALU operands.
    #

    instance dec     = decoder
    dec.data         = rdata_reg
    signal instr_reg = register(instr_nop, dec.instr when decode_en)

    instance regs  = register_unit(32)
    regs.reset     = reset
    regs.src_instr = dec.instr
    signal xs1_reg = register(0, regs.xs1 when decode_en)
    signal xs2_reg = register(0, regs.xs2 when decode_en)

    signal alu_a_reg = register(0, if dec.instr.use_pc  then pc                    else regs.xs1 when decode_en)
    signal alu_b_reg = register(0, if dec.instr.use_imm then word_t|dec.instr.imm| else regs.xs2 when decode_en)

    #
    # Instruction execution:
    # compute ALU and comparator results, compute branch address,
    # update program counter.
    #

    instance alu     = arith_logic_unit
    alu.instr        = instr_reg
    alu.a            = alu_a_reg
    alu.b            = alu_b_reg
    signal alu_r_reg = register(0, alu.r when execute_en)

    instance branch = branch_unit
    branch.reset    = reset
    branch.enable   = execute_en
    branch.irq      = irq
    branch.instr    = instr_reg
    branch.xs1      = xs1_reg
    branch.xs2      = xs2_reg
    branch.address  = alu.r
    branch.pc_next  = word_t|pc + 4|
    signal pc       = register(0 when reset, branch.pc when execute_en)

    signal pc_next_reg = register(0, branch.pc_next when execute_en)

    #
    # Memory access:
    # align data to/from memory, drive control outputs.
    #

    signal rdata_reg   = register(0, rdata when valid and ready)

    instance ld_st     = load_store_unit
    ld_st.instr        = instr_reg
    ld_st.address      = alu_r_reg
    ld_st.store_enable = store_en
    ld_st.store_data   = xs2_reg
    ld_st.rdata        = rdata_reg

    valid              = fetch_en or load_en or store_en
    address            = if fetch_en then pc else alu_r_reg
    wstrobe            = ld_st.wstrobe
    wdata              = ld_st.wdata

    #
    # Write back
    #

    regs.enable     = writeback_en
    regs.dest_instr = instr_reg
    regs.xd         = if     instr_reg.is_load then ld_st.load_data
                      elseif instr_reg.is_jump then pc_next_reg
                      else                          alu_r_reg
end
